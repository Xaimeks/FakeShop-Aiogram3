import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from .db import get_db_connection
import app.keyboards as kb

router = Router()

connection = get_db_connection()

class Buying(StatesGroup):
    city = State()
    product = State()
    number = State()

class Register(StatesGroup):
    nickname = State()

def get_products():
    if not connection:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return []
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT id, product_name, price, store_name, city FROM catalog")
            products = cursor.fetchall()
            return products
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []

@router.message(F.text == "–†–∞–±–æ—Ç–∞")
async def work(message: types.Message):
    await message.answer("""üòâ–ú–´ –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –í–ê–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ò –û–¢–ö–†–´–¢–û–°–¢–¨\n‚ù§Ô∏è–î–ê–ñ–ï –í –ö–†–ê–ô–ù–ï–ú –°–õ–£–ß–ê–ï –ù–ï –£–ì–†–û–ñ–ê–ï–ú –†–ê–°–ü–†–ê–í–û–ô\n\n–°–¢–†–û–ì–û 17+ –ö–£–†–ê–¢–û–† @hkurator""")

@router.message(F.text == "–ì–æ—Ä–æ–¥–∞")
async def cities(message: types.Message):
    cities_list = "üèôÔ∏è–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n\n–ú–æ—Å–∫–≤–∞\n–ü–∏—Ç–µ—Ä\n–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n–ö–∞–∑–∞–Ω—å\n–ï–∫–±\n–£—Ñ–∞\n–í–æ–ª–≥–æ–≥—Ä–∞–¥\n–í–æ–ª–∂—Å–∫–∏–π\n–°–æ—á–∏\n–í–æ—Ä–æ–Ω–µ–∂\n–ü–µ—Ä–º—å\n–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥\n–ß–µ–ª—è–±–∏–Ω—Å–∫\n–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"
    await message.answer(cities_list)

@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext):
    try:
        await state.set_state(Register.nickname)
        user_id = message.from_user.id
        cursor = connection.cursor()
        cursor.execute('SELECT id FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()

        if result is None:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∏–º—è")
        else:
            await message.answer("‚è¨", reply_markup=kb.main)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")

@router.message(Register.nickname)
async def handle_nickname_set(message: Message, state: FSMContext):
    try:
        await state.update_data(user_nickname=message.text)
        data = await state.get_data()
        user_nickname = data["user_nickname"]
        user_id = message.from_user.id
        cursor = connection.cursor()
        cursor.execute('SELECT id FROM users WHERE id = %s', (user_id,))
        result = cursor.fetchone()

        if result is None:
            cursor.execute('INSERT INTO users (id, name) VALUES (%s, %s)', (user_id, user_nickname))
            connection.commit()
            await message.answer("‚è¨", reply_markup=kb.main)
            await state.set_state(Buying.city)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:")
            await state.set_state(Buying.city)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(Buying.city)
async def handle_city_input(message: Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    data = await state.get_data()
    selected_city = data["city"]

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {selected_city}", reply_markup=None)
    await state.set_state(Buying.product)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup=kb.catalog)

@router.message(Buying.product)
async def select_product_handler(message: Message, state: FSMContext):
    await state.update_data(product=message.text.strip())  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    data = await state.get_data()
    product = data["product"]
    selected_city = data["city"]

    products = get_products()
    found_products = False 

    if products:
        for id, product_name, price, store_name, city in products:
            if city == selected_city and product.lower() in product_name.lower(): 
                found_products = True 
                product_info = (f"–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ {id}:\n"
                                f"–ù–∞–∑–≤–∞–Ω–∏–µ {product_name}\n"
                                f"–¶–µ–Ω–∞ {price}‚ÇΩ\n"
                                f"–ú–∞–≥–∞–∑–∏–Ω {store_name}\n"
                                f"–ì–æ—Ä–æ–¥ {city}\n")
                await message.answer(product_info, reply_markup=None)
                await message.answer("–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏!")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
                await state.update_data(selected_product_name=product_name)
                await state.update_data(selected_product_price=price)
                await state.update_data(selected_product_store=store_name)

                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
                await state.set_state(Buying.number)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")

        if not found_products:
            await message.answer("–ó–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–æ?")
    else:
        await message.answer("–ù–∞—Ä–∫–æ—Ç–∏–∫–∏ –∑–ª–æ!")

@router.message(Buying.number)
async def select_number_handler(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()

    number = data["number"]
    selected_product_name = data["selected_product_name"]
    selected_product_price = data["selected_product_price"]
    selected_product_store = data["selected_product_store"]

    products = get_products()
    product_found = False

    if number.isdigit():
        number = int(number)
        for id, product_name, price, store_name, city in products:
            if id == number:
                if selected_product_name == product_name:
                    product_found = True
                    await message.answer(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {number}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {selected_product_name}\n" 
                        f"–¶–µ–Ω–∞: {selected_product_price}‚ÇΩ\n" 
                        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_product_store}"
                    )
                    await message.answer("–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏!")
                    break
    if not product_found:
        await message.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")



# –ù–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
"""
@router.message(Buying.number)
async def select_number_handler(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    
    number = data["number"]
    selected_product_name = data["selected_product_name"]
    selected_product_price = data["selected_product_price"]
    selected_product_store = data["selected_product_store"]

    products = get_products()
    product_found = False

    if number.isdigit():
        number = int(number)
        for id, product_name, price, store_name, city in products:
            if id == number:
                if selected_product_name == product_name:
                    product_found = True
                    await message.answer(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {number}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {selected_product_name}\n" 
                        f"–¶–µ–Ω–∞: {selected_product_price}‚ÇΩ\n" 
                        f"–ú–∞–≥–∞–∑–∏–Ω: {selected_product_store}"
                    )
                    await message.answer("–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏!")
                    break
    if not product_found:
        await message.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
"""
